vmType: "vz"
rosetta:
  # Enable Rosetta for Linux.
  enabled: true
  # Register rosetta to /proc/sys/fs/binfmt_misc
  # Will used by docker to run amd64 images via Rosetta
  binfmt: true

images:
- location: "https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-amd64.img"
  arch: "x86_64"
- location: "https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-arm64.img"
  arch: "aarch64"

cpus: 12
memory: "16GiB"

networks:
- vzNAT: true

mountType: "virtiofs"
mounts:
- location: "~"
  writable: true
- location: "/tmp/lima"
  writable: true
# containerd is managed by Docker, not by Lima, so the values are set to false here.
containerd:
  system: false
  user: false
provision:
- mode: system
  # This script defines the host.docker.internal hostname when hostResolver is disabled.
  # It is also needed for lima 0.8.2 and earlier, which does not support hostResolver.hosts.
  # Names defined in /etc/hosts inside the VM are not resolved inside containers when
  # using the hostResolver; use hostResolver.hosts instead (requires lima 0.8.3 or later).
  script: |
    #!/bin/sh
    sed -i 's/host.lima.internal.*/host.lima.internal host.docker.internal/' /etc/hosts
- mode: system
  script: |
    #!/bin/bash
    set -eux -o pipefail
    command -v docker >/dev/null 2>&1 && exit 0
    export DEBIAN_FRONTEND=noninteractive
    curl -fsSL https://get.docker.com | sh
- mode: system
  script: |
    # hack to make ssh port forward able to access docker
    chmod 777 /var/run/docker.sock
- mode: system
  script: |
    # hit max FDs sometimes with KIND
    sysctl fs.inotify.max_user_instances=1280
    sysctl fs.inotify.max_user_watches=655360
- mode: system
  script: |
    #!/bin/sh
    set -e

    # needed for cilium
    mount bpffs -t bpf /sys/fs/bpf
    mount --make-shared /sys/fs/bpf
    mount --make-shared /sys/fs/cgroup


- mode: system
  script: |
    # cilium dev deps
    if [[ -f /.cilium-setup ]]; then
      exit 0
    fi
    snap install kubectl --classic 
    snap install helm --classic 
    snap install go --classic
    echo 'export PATH=$PATH:$HOME/go/bin' >> {{.Home}}/.bashrc
    apt-get update
    apt-get install -y build-essential make curl
    bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
    ln -s /bin/clang-18 /usr/local/bin/clang

    CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)
    CLI_ARCH=amd64
    if [ "$(uname -m)" = "aarch64" ]; then CLI_ARCH=arm64; fi
    curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz
    sudo tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin
    rm cilium-linux-${CLI_ARCH}.tar.gz

    go install github.com/onsi/ginkgo/ginkgo@v1.16.5
    go install github.com/mfridman/tparse@latest
    go install sigs.k8s.io/kind@latest
    go install github.com/go-delve/delve/cmd/dlv@latest
    curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.63.0
    touch /.cilium-setup

probes:
- script: |
    #!/bin/bash
    set -eux -o pipefail
    if ! timeout 30s bash -c "until command -v docker >/dev/null 2>&1; do sleep 3; done"; then
      echo >&2 "docker is not installed yet"
      exit 1
    fi
  hint: See "/var/log/cloud-init-output.log". in the guest
hostResolver:
  hosts:
    host.docker.internal: host.lima.internal
    lima-docker: 127.0.0.1
portForwards:
- guestPort: 443
- guestPort: 80
- guestSocket: "/var/run/docker.sock"
  hostSocket: "{{.Dir}}/sock/docker.sock"
message: |
  To run `docker` on the host (assumes docker-cli is installed), run the following commands:
  ------
  docker context create lima --docker "host=unix://{{.Dir}}/sock/docker.sock"
  docker context use lima
  docker run hello-world
  ------
